#!/usr/bin/env python3

from __future__ import print_function
   
import numpy as np
import astropy.io.fits as fits
import astropy.io.ascii as ascii
import glob, os, shutil, warnings
import string, gc, time, copy
import argparse, datetime
import matplotlib.pyplot as pl
from mpi4py import MPI

from mcalf.routines import hires_fitter as fitter

pl.rc('text', usetex=True)
pl.rcParams['font.size'] = 20

parser = argparse.ArgumentParser()
parser.add_argument('--debug', action='store_true')
parser.add_argument('config')
args = parser.parse_args()

configpars = fitter.readconfig(args.config)

if args.debug:
   print('DEBUG mode, increased verbosity')

#Create directories if necessary
if MPI.COMM_WORLD.rank==0:
 if not os.path.isdir(configpars['chaindir']):
   os.makedirs(configpars['chaindir'])
 if not os.path.isdir(configpars['plotdir']):
   os.makedirs(configpars['plotdir'])

if configpars['dofit']:

    for comp in range(configpars['ncomp'][0],configpars['ncomp'][1]+1):
        
        with fitter.als_fitter(configpars['specfile'], configpars['wavefit'], configpars['linelist'], comp, \
                                 nfill=configpars['nfill'], coldef=configpars['coldef'], contval=configpars['contval'], \
                                 specres=configpars['specres'], Nrange=configpars['Nrange'], brange=configpars['brange'], \
                                 zrange=configpars['zrange'], Nrangefill=configpars['Nrangefill'], \
                                 brangefill=configpars['brangefill'], wrangefill=configpars['wrangefill'], \
                                 Asymmlike=configpars['asymmlike'], debug= args.debug) as temp:

           if configpars['solver'] == 'polychord':
              
              import pypolychord
              from pypolychord.settings import PolyChordSettings
              
              settings = PolyChordSettings(temp.ndim, 0)
              settings.file_root = configpars['chainfmt'].format(comp, configpars['nfill'])
              settings.base_dir = configpars['chaindir']
           
              if 'pcsettings' in configpars:
                 configsettings = configpars['pcsettings']
                 settings.nlive         = int(configsettings['nlive'])
                 settings.num_repeats   = int(configsettings['num_repeats'])
                 settings.precision_criterion = float(configsettings['precision_criterion'])
                 settings.feedback      = int(configsettings['feedback'])
                 settings.do_clustering = configsettings['do_clustering']
                 settings.equals        = configsettings['equals']
                 settings.read_resume   = configsettings['read_resume']
                 settings.write_resume  = configsettings['write_resume']
                 settings.write_live    = configsettings['write_live']
                 settings.write_dead    = configsettings['write_dead']
                 settings.write_prior   = configsettings['write_prior']
                 settings.posteriors    = configsettings['posteriors']
                 settings.cluster_posteriors = configsettings['cluster_posteriors']
           
              #| Run PolyChord
           
              t0 = datetime.datetime.now()
              output = pypolychord.run_polychord(temp.lnlhood_pc, temp.ndim, 0, settings, temp._scale_cube_pc)
              t1 = datetime.datetime.now()
              if MPI.COMM_WORLD.rank==0:
                 print('Execution time {}'.format(t1-t0))
            
           elif configpars['solver'] == 'multinest':
              
              import pymultinest
              
              out_fmt = configpars['chaindir']+'/'+configpars['chainfmt'].format(comp, configpars['nfill'])
              
              if 'mnsettings' in configpars:
                 configsettings = configpars['mnsettings']
                 if 'nlive' in configsettings:
                    nlive = int(configsettings['nlive'])
                 else:
                    nlive = 1000   
                 if 'samplingeff' in configsettings:
                    samplingeff = float(configsettings['samplingeff'])
                 else:
                    samplingeff = 0.3  
              
              t0 = datetime.datetime.now()
              pymultinest.run(temp.lnlhood_mn, temp._scale_cube_mn, temp.ndim, sampling_efficiency=samplingeff, resume=False, \
                   outputfiles_basename=out_fmt, verbose=True, multimodal=False, \
                   importance_nested_sampling=False, n_live_points=nlive, n_iter_before_update=100, \
                   evidence_tolerance=0.1)
              t1 = datetime.datetime.now()
              if MPI.COMM_WORLD.rank==0:
                 print('Execution time {}'.format(t1-t0))
           
           elif configpars['solver'] == 'dynesty':
               
               import dynesty
               
               out_fmt = configpars['chaindir']+'/'+configpars['chainfmt'].format(comp, configpars['nfill'])
               
               dsampler = dynesty.DynamicNestedSampler(temp.lnlhood_dy, temp._scale_cube_pc, temp.ndim, bound='none', method='unif')
               dsampler.run_nested()
               dresults = dsampler.results
               
               samples = dresults.samples  # samples
               weights = np.exp(dresults.logwt - dresults.logz[-1])  # normalized weights

               # Resample weighted samples.
               samples_equal = dyfunc.resample_equal(samples, weights)
               
               np.savetxt(out_fmt+'equal_weights.txt', samples_equal)               
               
           else:
                 print('Requested solver {} not implemented'.format(solver))

if configpars['doplot']:
     
     #This can only be one on one core....
                             
     if MPI.COMM_WORLD.rank==0:
        #First evaluate evidence as a function of number of components
        Ncomp_existing = []
        AIC_existing = []
        
        print('Analyzing run: '+configpars['chainfmt'].format('',''))
        plotrange= np.arange(1,50)
        
        for comp in range(configpars['ncomp'][0],configpars['ncomp'][1]+1):
          if os.path.exists(configpars['chaindir']+configpars['chainfmt'].format(comp, configpars['nfill'])+'_equal_weights.txt'): 
            
            with fitter.als_fitter(configpars['specfile'], configpars['wavefit'], configpars['linelist'], comp, \
                                 nfill=configpars['nfill'], coldef=configpars['coldef'], contval=configpars['contval'], \
                                 specres=configpars['specres'], Nrange=configpars['Nrange'], brange=configpars['brange'], \
                                 zrange=configpars['zrange'], Nrangefill=configpars['Nrangefill'], \
                                 brangefill=configpars['brangefill'], wrangefill=configpars['wrangefill'], Asymmlike=configpars['asymmlike'], \
                                 debug=args.debug) as temp:
                          
              lnz, dlnz, lhoodval, values = fitter.pc_analyzer(configpars['chaindir']+configpars['chainfmt'].format(comp, temp.nfill), return_sorted=True)
              
              #Define parameter names
              parameters = fitter.get_parnames(temp.ncomp+temp.nfill, temp.freecont)
        
              meds = np.percentile(values, 50, axis=0) 
              percs = np.transpose(np.percentile(values, [16,50,84], axis=0))
        
              if len(temp.contval)>1:
                 if len(temp.specres)>1:
                   continuum = meds[1]
                 else:
                   continuum = meds[0]  
              else:
                 continuum = temp.contval 
              
              if len(temp.specres)>1:
                 specresolution = meds[0]
              else:
                 specresolution = temp.specres   
                            
              #Calc median likelihood across posterior
              lnlhood = np.percentile(lhoodval, 50)
              AIC = 2*temp.ndim-2*lnlhood
              chi2 = temp.chi2(meds)
              
              AIC_existing.append(AIC)
              Ncomp_existing.append(comp)
                            
              print('{0:02}+{1:02} Components: Ln(z): {2:6.3f}, Ln(L): {3:6.3f}, Chi2: {5:6.3f}, AIC: {4:6.3f}'.format(comp, temp.nfill, lnz, lnlhood, AIC, chi2))
                              
              if comp in plotrange:
                 
                 nrows = (temp.numfitranges // configpars['nmaxcols'] )
                 if temp.numfitranges % configpars['nmaxcols'] > 0:
                    nrows += 1
                    
                 if nrows == 1:
                    ncols = temp.numfitranges
                 else:
                    ncols = configpars['nmaxcols']   
                                                  
                 figsize = (10*ncols,5*nrows)
                 fig, ax = pl.subplots(nrows=int(nrows), ncols=int(ncols), sharey=True, figsize=figsize, squeeze=False)
                 
                 nsamp = min([len(values),100])
                 if nsamp< 100:
                    rsamples = np.arange(nsamp)
                 else:
                    rsamples = np.random.randint(values.shape[0], size=nsamp)
                 
                 for waverange in range(temp.numfitranges):
                   
                   colind = int(waverange % configpars['nmaxcols'])
                   rowind = int(waverange / configpars['nmaxcols'])
                   
                   ax[rowind,colind].step(temp.obj_wl, temp.obj, color='black', where='mid', lw=1)
                   ax[rowind,colind].plot(temp.obj_wl, temp.obj_noise, '-b', lw=0.5)
                   ax[rowind,colind].set_xlim(configpars['wavefit'][waverange])
                   ax[rowind,colind].set_ylim(configpars['yrange'])
                           
                   for ii in rsamples:
                       tsamp = values[ii,:]
                       tspec = temp.reconstruct_spec(tsamp)
                       
                       ax[rowind,colind].plot(temp.obj_wl, tspec, color='red', alpha=1-8E-3*nsamp, lw=2-1.7E-2*nsamp, rasterized=False)

                   for i in range(temp.ncomp+temp.nfill):
                       
                       _N, _z, _b = meds[3*i+temp.startind+np.arange(3)]
                       
                       if _z<10:
                          color = 'dodgerblue'
                          spec1 = temp.reconstruct_onecomp(specresolution, continuum, _N, _z, _b)
                          
                          #Plot ticks at component positions, needs to be done for all 
                          #transitions in the plotted range
                          for trans in range(temp.numlines):
                             wave = temp.linepars[trans]['wrest'].value*(1+_z)
                             ax[rowind,colind].plot([wave, wave], [1.06, 1.10], color='blue')
                          
                       else:
                          color = 'salmon' 
                          spec1 = temp.reconstruct_onecomp_fill(specresolution, continuum, _N, _z, _b)  
                          
                          wave = temp.linefill['wrest'].value*(1+_z)
                          ax[rowind,colind].plot([wave, wave], [1.06, 1.10], color='red')

                       ax[rowind,colind].plot(temp.obj_wl, spec1, color=color, ls='dotted', lw=0.8, zorder=1)
                       
        
                 fig.tight_layout()
                 #pl.show()
                 pl.savefig(configpars['plotdir']+configpars['chainfmt'].format(comp, temp.nfill)+'.pdf')


        Ncomp_existing = np.array(Ncomp_existing)
        AIC_existing = np.array(AIC_existing)
        lnAICratio = 0.5*(np.min(AIC_existing)-AIC_existing)
        
        okmodels = (lnAICratio>-5) #Odds ratio of 150
        okstr = ''
        for jj in range(okmodels.sum()):
            okstr += '{} '.format(Ncomp_existing[okmodels][jj])
                    
        print('Models to be considered for the analysis: '+okstr)
