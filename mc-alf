#!/usr/bin/env python

from __future__ import print_function
import numpy as np
import astropy.io.fits as fits
import astropy.io.ascii as ascii
import glob, os, shutil, warnings
import string, gc, time, copy
import argparse, datetime
import matplotlib.pyplot as pl
import pypolychord
from pypolychord.settings import PolyChordSettings
import hires_fitter as fitter
from mpi4py import MPI

pl.rc('text', usetex=True)

parser = argparse.ArgumentParser()
parser.add_argument('config')
args = parser.parse_args()

configpars = fitter.readconfig(args.config)

#Create directories if necessary
if not os.path.isdir(configpars['chaindir']):
   os.makedirs(configpars['chaindir'])
if not os.path.isdir(configpars['plotdir']):
   os.makedirs(configpars['plotdir'])

if configpars['dofit']:

    for comp in range(configpars['ncomp'][0],configpars['ncomp'][1]+1):
        
        with fitter.hires_fitter(configpars['specfile'], configpars['wavefit'], configpars['linelist'], comp, \
	                         nfill=configpars['nfill'], coldef=configpars['coldef'], contval=configpars['contval'], \
				 Nrange=configpars['Nrange'], brange=configpars['brange'], zrange=configpars['zrange'], \
				 Nrangefill=configpars['Nrangefill'], brangefill=configpars['brangefill']) as temp:

           settings = PolyChordSettings(temp.ndim, 0)
           settings.file_root = configpars['chainfmt'].format(comp, configpars['nfill'])
           settings.base_dir = configpars['chaindir']
           
	   if 'pcsettings' in configpars:
	      configsettings = configpars['pcsettings']
	      settings.nlive         = int(configsettings['nlive'])
              settings.num_repeats   = int(configsettings['num_repeats'])
              settings.precision_criterion = float(configsettings['precision_criterion'])
              settings.feedback      = int(configsettings['feedback'])
              settings.do_clustering = configsettings['do_clustering']
              settings.equals        = configsettings['equals']
              settings.read_resume   = configsettings['read_resume']
              settings.write_resume  = configsettings['write_resume']
              settings.write_live    = configsettings['write_live']
              settings.write_dead    = configsettings['write_dead']
              settings.write_prior   = configsettings['write_prior']
              settings.posteriors    = configsettings['posteriors']
              settings.cluster_posteriors = configsettings['cluster_posteriors']
	   
           #| Run PolyChord
           
           t0 = datetime.datetime.now()
	   output = pypolychord.run_polychord(temp.lnlhood, temp.ndim, 0, settings, temp._scale_cube)
           t1 = datetime.datetime.now()
	   if MPI.COMM_WORLD.rank==0:
	      print('Execution time {}'.format(t1-t0))


if configpars['doplot']:
     
     #This can only be one on one core....
                             
     if MPI.COMM_WORLD.rank==0:
        #First evaluate evidence as a function of number of components
        Ncomp_existing = []
        AIC_existing = []
        
        print('Analyzing run: '+configpars['chainfmt'].format('',''))
        plotrange= np.arange(1,50)
        
        for comp in range(configpars['ncomp'][0],configpars['ncomp'][1]+1):
          if os.path.exists(configpars['chaindir']+configpars['chainfmt'].format(comp, configpars['nfill'])+'_equal_weights.txt'): 
            
            with fitter.hires_fitter(configpars['specfile'], configpars['wavefit'], configpars['linelist'], comp, \
	                         nfill=configpars['nfill'], coldef=configpars['coldef'], contval=configpars['contval'], \
				 Nrange=configpars['Nrange'], brange=configpars['brange'], zrange=configpars['zrange'], \
				 Nrangefill=configpars['Nrangefill'], brangefill=configpars['brangefill']) as temp:
	                  
              lnz, dlnz, lhoodval, values = fitter.pc_analyzer(configpars['chaindir']+configpars['chainfmt'].format(comp, temp.nfill), return_sorted=True)
              
              #Define parameter names
              parameters = fitter.get_parnames(temp.ncomp+temp.nfill, temp.freecont)
        
              meds = np.percentile(values, 50, axis=0) 
              percs = np.transpose(np.percentile(values, [16,50,84], axis=0))
        
              if len(temp.contval)>1:
                 continuum = meds[0]
              else:
                 continuum = temp.contval 
                            
              #Calc median likelihood across posterior
              lnlhood = np.percentile(lhoodval, 50)
              AIC = 2*temp.ndim-2*lnlhood
              
              AIC_existing.append(AIC)
              Ncomp_existing.append(comp)
              
              print('{0:02}+{1:02} Components model: NS Ln(z): {2:6.3f}, Ln(L): {3:6.3f}, AIC: {4:6.3f}'.format(comp, temp.nfill, lnz, lnlhood, AIC))
                              
              if comp in plotrange:
	         
		 nrows = (temp.numfitranges / configpars['nmaxcols'] )
		 if temp.numfitranges % configpars['nmaxcols'] > 0:
		    nrows += 1
		    
		 if nrows == 1:
		    ncols = temp.numfitranges
		 else:
		    ncols = configpars['nmaxcols']   
		 		 
                 figsize = (10*ncols,5*nrows)
                 fig, ax = pl.subplots(nrows=nrows, ncols=ncols, sharey=True, figsize=figsize, squeeze=False)
                 
		 nsamp = min([len(values),100])
                 if nsamp< 100:
		    rsamples = np.arange(nsamp)
		 else:
		    rsamples = np.random.randint(values.shape[0], size=nsamp)
		 
                 for waverange in range(temp.numfitranges):
                   
		   colind = waverange % configpars['nmaxcols'] 
		   rowind = waverange / configpars['nmaxcols'] 
		   
                   ax[rowind,colind].step(temp.obj_wl, temp.obj, color='black', where='mid', lw=1)
                   ax[rowind,colind].plot(temp.obj_wl, temp.obj_noise, '-b', lw=0.5)
                   ax[rowind,colind].set_xlim(configpars['wavefit'][waverange])
                           
                   for ii in rsamples:
                       tsamp = values[ii,:]
                       tspec = temp.reconstruct_spec(tsamp)
                       
                       ax[rowind,colind].plot(temp.obj_wl, tspec, color='red', alpha=1-8E-3*nsamp, lw=2-1.7E-2*nsamp, rasterized=False)

                   for i in range(temp.ncomp+temp.nfill):
                       
                       _N, _z, _b = meds[3*i+temp.startind+np.arange(3)]
                       
                       if _z<10:
                          color = 'dodgerblue'
                          spec1 = temp.reconstruct_onecomp(continuum, _N, _z, _b)
                       else:
                          color = 'salmon' 
                          spec1 = temp.reconstruct_onecomp_fill(continuum, _N, _z, _b)  
                       
                       ax[rowind,colind].plot(temp.obj_wl, spec1, color=color, ls='dotted', lw=0.8, zorder=1)
                       
                       #Plot ticks at component positions, needs to be done for all 
		       #transitions in the plotted range
                       for trans in range(temp.numlines):
		         wave = temp.linepars[trans]['wrest'].value*(1+_z)
                         ax[rowind,colind].plot([wave, wave], [1.06, 1.10], color='red')
        
                 fig.tight_layout()
                 #pl.show()
                 pl.savefig(configpars['plotdir']+configpars['chainfmt'].format(comp, temp.nfill)+'.pdf')


        Ncomp_existing = np.array(Ncomp_existing)
        AIC_existing = np.array(AIC_existing)
        lnAICratio = 0.5*(np.min(AIC_existing)-AIC_existing)
        
        okmodels = (lnAICratio>-5) #Odds ratio of 150
        okstr = ''
        for jj in range(okmodels.sum()):
            okstr += '{} '.format(Ncomp_existing[okmodels][jj])
                    
        print('Models to be considered for the analysis: '+okstr)
